# --- –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ ---
import asyncio

# --- –°—Ç–æ—Ä–æ–Ω–Ω–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ ---
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.exceptions import TelegramBadRequest

# --- –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –º–æ–¥—É–ª–∏ ---
from services.config import get_target_display_local
from services.menu import update_menu
from services.gifts import get_filtered_gifts
from services.buy import buy_gift
from services.balance import refresh_balance

wizard_router = Router()

class CatalogFSM(StatesGroup):
    """
    –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM –∫–∞—Ç–∞–ª–æ–≥–∞ –ø–æ–¥–∞—Ä–∫–æ–≤.
    """
    waiting_gift = State()
    waiting_quantity = State()
    waiting_recipient = State()
    waiting_confirm = State()


def gifts_catalog_keyboard(gifts):
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∫–∞—Ç–∞–ª–æ–≥–∞ –ø–æ–¥–∞—Ä–∫–æ–≤. 
    –ö–∞–∂–¥—ã–π –ø–æ–¥–∞—Ä–æ–∫ ‚Äî –æ—Ç–¥–µ–ª—å–Ω–∞—è –∫–Ω–æ–ø–∫–∞, –ø–ª—é—Å –∫–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é.
    """
    keyboard = []
    for gift in gifts:
        if gift['supply'] == None:
            btn = InlineKeyboardButton(
                text=f"{gift['emoji']} ‚Äî ‚òÖ{gift['price']:,}",
                callback_data=f"catalog_gift_{gift['id']}"
            )
        else:
            btn = InlineKeyboardButton(
                text=f"{gift['left']:,} –∏–∑ {gift['supply']:,} ‚Äî ‚òÖ{gift['price']:,}",
                callback_data=f"catalog_gift_{gift['id']}"
            )
        keyboard.append([btn])

    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    keyboard.append([
        InlineKeyboardButton(
            text="‚ò∞ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", 
            callback_data="catalog_main_menu"
        )
    ])

    return InlineKeyboardMarkup(inline_keyboard=keyboard)


@wizard_router.callback_query(F.data == "catalog")
async def catalog(call: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞. –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–¥–∞—Ä–∫–æ–≤ –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π.
    """
    gifts = await get_filtered_gifts(
        bot=call.bot,
        min_price=0,
        max_price=1000000,
        min_supply=0,
        max_supply=100000000,
        unlimited = True
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –∫–∞—Ç–∞–ª–æ–≥ –≤ FSM ‚Äî –Ω—É–∂–µ–Ω –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö —à–∞–≥–æ–≤
    await state.update_data(gifts_catalog=gifts)

    gifts_limited = [g for g in gifts if g['supply'] != None]
    gifts_unlimited = [g for g in gifts if g['supply'] == None]

    await call.message.answer(
        f"üß∏ –û–±—ã—á–Ω—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤: <b>{len(gifts_unlimited)}</b>\n"
        f"üëú –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤: <b>{len(gifts_limited)}</b>\n",
        reply_markup=gifts_catalog_keyboard(gifts)
    )

    await call.answer()


@wizard_router.callback_query(F.data == "catalog_main_menu")
async def start_callback(call: CallbackQuery, state: FSMContext):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ –Ω–∞–∂–∞—Ç–∏—é –∫–Ω–æ–ø–∫–∏ "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é".
    –û—á–∏—â–∞–µ—Ç –≤—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    await state.clear()
    await call.answer()
    await safe_edit_text(call.message, "üö´ –ö–∞—Ç–∞–ª–æ–≥ –∑–∞–∫—Ä—ã—Ç.", reply_markup=None)
    await refresh_balance(call.bot)
    await update_menu(
        bot=call.bot,
        chat_id=call.message.chat.id,
        user_id=call.from_user.id,
        message_id=call.message.message_id
    )


@wizard_router.callback_query(F.data.startswith("catalog_gift_"))
async def on_gift_selected(call: CallbackQuery, state: FSMContext):
    """
    –•–µ–Ω–¥–ª–µ—Ä –≤—ã–±–æ—Ä–∞ –ø–æ–¥–∞—Ä–∫–∞ –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞. –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –ø–æ–∫—É–ø–∫–∏.
    """
    gift_id = call.data.split("_")[-1]
    data = await state.get_data()
    gifts = data.get("gifts_catalog", [])
    if not gifts:
        await call.answer("üö´ –ö–∞—Ç–∞–ª–æ–≥ —É—Å—Ç–∞—Ä–µ–ª. –û—Ç–∫—Ä–æ–π—Ç–µ –∑–∞–Ω–æ–≤–æ.", show_alert=True)
        await safe_edit_text(call.message, "üö´ –ö–∞—Ç–∞–ª–æ–≥ —É—Å—Ç–∞—Ä–µ–ª. –û—Ç–∫—Ä–æ–π—Ç–µ –∑–∞–Ω–æ–≤–æ.", reply_markup=None)
        return
    gift = next((g for g in gifts if str(g['id']) == gift_id), None)

    gift_display = f"{gift['left']:,} –∏–∑ {gift['supply']:,}" if gift.get("supply") != None else gift.get("emoji")

    await state.update_data(selected_gift=gift)
    await call.message.edit_text(
        f"üéØ –í—ã –≤—ã–±—Ä–∞–ª–∏: <b>{gift_display}</b> –∑–∞ ‚òÖ{gift['price']}\n"
        f"üéÅ –í–≤–µ–¥–∏—Ç–µ <b>–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ</b> –¥–ª—è –ø–æ–∫—É–ø–∫–∏:\n\n"
        f"/cancel - –¥–ª—è –æ—Ç–º–µ–Ω—ã",
        reply_markup=None
    )
    await state.set_state(CatalogFSM.waiting_quantity)
    await call.answer()


@wizard_router.message(CatalogFSM.waiting_quantity)
async def on_quantity_entered(message: Message, state: FSMContext):
    """
    –•–µ–Ω–¥–ª–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–¥–∞—Ä–∫–∞.
    –¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —à–∞–≥—É –≤–≤–æ–¥–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è.
    """
    if await try_cancel(message, state):
        return
    
    try:
        qty = int(message.text)
        if qty <= 0:
            raise ValueError
    except Exception:
        await message.answer("üö´ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ!")
        return
    
    await state.update_data(selected_qty=qty)

    await message.answer(
        "üë§ –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è –ø–æ–¥–∞—Ä–∫–∞:\n\n"
        f"‚Ä¢ <b>ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b> (–Ω–∞–ø—Ä–∏–º–µ—Ä –≤–∞—à: <code>{message.from_user.id}</code>)\n"
        "‚Ä¢ –ò–ª–∏ <b>username –∫–∞–Ω–∞–ª–∞</b> (–Ω–∞–ø—Ä–∏–º–µ—Ä: <code>@channel</code>)\n\n"
        "‚ùóÔ∏è –£–∑–Ω–∞—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç—É—Ç @userinfobot\n\n"
        "/cancel ‚Äî –æ—Ç–º–µ–Ω–∏—Ç—å"
    )
    await state.set_state(CatalogFSM.waiting_recipient)


@wizard_router.message(CatalogFSM.waiting_recipient)
async def on_recipient_entered(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è (ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ username –∫–∞–Ω–∞–ª–∞).
    """
    if await try_cancel(message, state):
        return

    user_input = message.text.strip()
    if user_input.startswith("@"):
        target_chat_id = user_input
        target_user_id = None
    elif user_input.isdigit():
        target_chat_id = None
        target_user_id = int(user_input)
    else:
        await message.answer(
            "üö´ –ï—Å–ª–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—å –∞–∫–∫–∞—É–Ω—Ç ‚Äî –≤–≤–µ–¥–∏—Ç–µ ID, –µ—Å–ª–∏ –∫–∞–Ω–∞–ª ‚Äî username —Å @. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑."
        )
        return

    await state.update_data(
        target_user_id=target_user_id,
        target_chat_id=target_chat_id
    )

    data = await state.get_data()
    gift = data["selected_gift"]
    qty = data["selected_qty"]
    price = gift.get("price")
    total = price * qty

    gift_display = f"{gift['left']:,} –∏–∑ {gift['supply']:,}" if gift.get("supply") != None else gift.get("emoji")

    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_purchase"),
                InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_purchase"),
            ]
        ]
    )
    recipient_display = get_target_display_local(target_user_id, target_chat_id, message.from_user.id)
    await message.answer(
        f"üì¶ –ü–æ–¥–∞—Ä–æ–∫: <b>{gift_display}</b>\n"
        f"üéÅ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: <b>{qty}</b>\n"
        f"üíµ –¶–µ–Ω–∞ –ø–æ–¥–∞—Ä–∫–∞: <b>‚òÖ{price:,}</b>\n"
        f"üí∞ –û–±—â–∞—è —Å—É–º–º–∞: <b>‚òÖ{total:,}</b>\n"
        f"üë§ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: {recipient_display}",
        reply_markup=kb
    )
    await state.set_state(CatalogFSM.waiting_confirm)


@wizard_router.callback_query(F.data == "confirm_purchase")
async def confirm_purchase(call: CallbackQuery, state: FSMContext):
    """
    –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ –ø–æ–∫—É–ø–∫–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–¥–∞—Ä–∫–∞ –≤ –∑–∞–¥–∞–Ω–Ω–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—É—á–∞—Ç–µ–ª—è.
    """
    data = await state.get_data()
    gift = data["selected_gift"]
    if not gift:
        await call.answer("üö´ –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–∫—É–ø–∫—É –Ω–µ –∞–∫—Ç—É–∞–ª–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", show_alert=True)
        await safe_edit_text(call.message, "üö´ –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–∫—É–ø–∫—É –Ω–µ –∞–∫—Ç—É–∞–ª–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=None)
        return
    await call.message.edit_text(text="‚è≥ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ–∫—É–ø–∫–∞ –ø–æ–¥–∞—Ä–∫–æ–≤...", reply_markup=None)
    gift_id = gift.get("id")
    gift_price = gift.get("price")
    qty = data["selected_qty"]
    target_user_id=data.get("target_user_id")
    target_chat_id=data.get("target_chat_id")
    gift_display = f"{gift['left']:,} –∏–∑ {gift['supply']:,}" if gift.get("supply") != None else gift.get("emoji")

    bought = 0
    while bought < qty:
        success = await buy_gift(
            bot=call.bot,
            env_user_id=call.from_user.id,
            gift_id=gift_id,
            user_id=target_user_id,
            chat_id=target_chat_id,
            gift_price=gift_price,
            file_id=None
        )

        if not success:
            break

        bought += 1
        await asyncio.sleep(0.3)

    if bought == qty:
        await call.message.answer(f"‚úÖ –ü–æ–∫—É–ø–∫–∞ <b>{gift_display}</b> —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
                                  f"üéÅ –ö—É–ø–ª–µ–Ω–æ –ø–æ–¥–∞—Ä–∫–æ–≤: <b>{bought}</b> –∏–∑ <b>{qty}</b>\n"
                                  f"üë§ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: {get_target_display_local(target_user_id, target_chat_id, call.from_user.id)}")
    else:
        await call.message.answer(f"‚ö†Ô∏è –ü–æ–∫—É–ø–∫–∞ <b>{gift_display}</b> –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.\n"
                                  f"üéÅ –ö—É–ø–ª–µ–Ω–æ –ø–æ–¥–∞—Ä–∫–æ–≤: <b>{bought}</b> –∏–∑ <b>{qty}</b>\n"
                                  f"üë§ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: {get_target_display_local(target_user_id, target_chat_id, call.from_user.id)}\n"
                                  f"üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å!\n"
                                  f"üì¶ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–æ–¥–∞—Ä–∫–∞!\n"
                                  f"üö¶ –°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ üî¥ (–Ω–µ–∞–∫—Ç–∏–≤–µ–Ω).")
    
    await state.clear()
    await call.answer()
    await update_menu(bot=call.bot, chat_id=call.message.chat.id, user_id=call.from_user.id, message_id=call.message.message_id)


@wizard_router.callback_query(lambda c: c.data == "cancel_purchase")
async def cancel_callback(call: CallbackQuery, state: FSMContext):
    """
    –û—Ç–º–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏ –ø–æ–¥–∞—Ä–∫–∞ –Ω–∞ —ç—Ç–∞–ø–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.
    """
    await state.clear()
    await call.answer()
    await safe_edit_text(call.message, "üö´ –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=None)
    await update_menu(bot=call.bot, chat_id=call.message.chat.id, user_id=call.from_user.id, message_id=call.message.message_id)


async def try_cancel(message: Message, state: FSMContext) -> bool:
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–º–µ–Ω—ã –ª—é–±–æ–≥–æ —à–∞–≥–∞ —Å –ø–æ–º–æ—â—å—é /cancel.
    –û—á–∏—â–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç True –µ—Å–ª–∏ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–∞.
    """
    if message.text and message.text.strip().lower() == "/cancel":
        await state.clear()
        await message.answer("üö´ –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        await update_menu(bot=message.bot, chat_id=message.chat.id, user_id=message.from_user.id, message_id=message.message_id)
        return True
    return False


async def safe_edit_text(message, text, reply_markup=None):
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –∏–≥–Ω–æ—Ä–∏—Ä—É—è –æ—à–∏–±–∫–∏ "–Ω–µ–ª—å–∑—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å" –∏ "—Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ".
    """
    try:
        await message.edit_text(text, reply_markup=reply_markup)
        return True
    except TelegramBadRequest as e:
        if "message can't be edited" in str(e) or "message to edit not found" in str(e):
            # –ü—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º ‚Äî —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å—Ç–∞—Ä–µ–ª–æ –∏–ª–∏ —É–¥–∞–ª–µ–Ω–æ
            return False
        else:
            raise


def register_catalog_handlers(dp):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –∫–∞—Ç–∞–ª–æ–≥–æ–º –ø–æ–¥–∞—Ä–∫–æ–≤.
    """
    dp.include_router(wizard_router)
