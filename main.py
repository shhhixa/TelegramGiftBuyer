"""
–ì–ª–∞–≤–Ω—ã–π –º–æ–¥—É–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Telegram Gifts Bot.

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è:
- –ó–∞–ø—É—Å–∫–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.
- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤ –∏ middleware.
- –ó–∞–ø—É—Å–∫–∞ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á.

–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:
- main: –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.
- gift_purchase_worker: –§–æ–Ω–æ–≤—ã–π –≤–æ—Ä–∫–µ—Ä –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –ø–æ–¥–∞—Ä–∫–æ–≤.

–ê–≤—Ç–æ—Ä: @leozizu
–ö–∞–Ω–∞–ª: @pepeksey
–õ–∏—Ü–µ–Ω–∑–∏—è: MIT
"""

# --- –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ ---
import asyncio
import logging
import sys

# --- –°—Ç–æ—Ä–æ–Ω–Ω–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ ---
from aiogram import Bot, Dispatcher
from aiogram.utils.backoff import BackoffConfig
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.fsm.storage.memory import MemoryStorage
from pyrogram.errors import SecurityCheckMismatch

# --- –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –º–æ–¥—É–ª–∏ ---
from services.config import (
    ensure_config,
    save_config,
    get_valid_config,
    get_target_display,
    migrate_config_if_needed,
    add_allowed_user,
    set_use_redis,
    set_redis_config,
    update_config_from_env,
    VERSION,
    PURCHASE_COOLDOWN,
    MORE_LOGS,
    DEFAULT_BOT_DELAY,
    REQUEST_PROFILE
)
from services.menu import update_menu
from services.balance import refresh_balance
from services.gifts_manager import get_best_gift_list, userbot_gifts_updater, filter_gifts_by_profile
from services.buy_bot import buy_gift
from services.buy_userbot import buy_gift_userbot
from services.userbot import try_start_userbot_from_config
from handlers.handlers_wizard import register_wizard_handlers
from handlers.handlers_catalog import register_catalog_handlers
from handlers.handlers_main import register_main_handlers
from utils.logging import setup_logging
from utils.proxy import get_aiohttp_session
from utils.env_loader import get_env_variable
from utils.log_cache import LOG_CACHE_HANDLER
from middlewares.access_control import AccessControlMiddleware
from middlewares.rate_limit import RateLimitMiddleware

setup_logging()
logger = logging.getLogger(__name__)
logging.getLogger().addHandler(LOG_CACHE_HANDLER)

TOKEN = get_env_variable("TELEGRAM_BOT_TOKEN")
USER_ID = int(get_env_variable("TELEGRAM_USER_ID", 0))
ALLOWED_USER_IDS = []
ALLOWED_USER_IDS.append(USER_ID)
add_allowed_user(USER_ID)

async def gift_purchase_worker(bot: Bot) -> None:
    """
    –§–æ–Ω–æ–≤—ã–π –≤–æ—Ä–∫–µ—Ä –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –ø–æ–¥–∞—Ä–∫–æ–≤ –ø–æ –ø—Ä–æ—Ñ–∏–ª—è–º.
    –¢–µ–ø–µ—Ä—å —É—á–∏—Ç—ã–≤–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä LIMIT ‚Äî –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É –∑–≤—ë–∑–¥, –∫–æ—Ç–æ—Ä—É—é –º–æ–∂–Ω–æ –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å.
    –ï—Å–ª–∏ –ª–∏–º–∏—Ç –∏—Å—á–µ—Ä–ø–∞–Ω ‚Äî –ø—Ä–æ—Ñ–∏–ª—å —Å—á–∏—Ç–∞–µ—Ç—Å—è –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–º –∏ –≤–æ—Ä–∫–µ—Ä –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ —Å–ª–µ–¥—É—é—â–µ–º—É.

    :param bot: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ aiogram
    :return: None
    """
    await refresh_balance(bot)
    while True:
        try:
            config = await get_valid_config(USER_ID)

            if not config["ACTIVE"]:
                await asyncio.sleep(1)
                continue

            message = None
            report_message_lines = []
            progress_made = False  # –ë—ã–ª –ª–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –ø—Ä–æ—Ñ–∏–ª—è–º –Ω–∞ —ç—Ç–æ–º –ø—Ä–æ—Ö–æ–¥–µ
            any_success = True

            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ª–∏–º–∏—Ç–Ω—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤
            all_gifts = await get_best_gift_list(USER_ID, bot, REQUEST_PROFILE)

            for profile_index, profile in enumerate(config["PROFILES"]):
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏
                if profile.get("DONE"):
                    continue
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ñ–∏–ª–∏ —Å –≤—ã–∫–ª—é—á–µ–Ω–Ω—ã–º —é–∑–µ—Ä–±–æ—Ç–æ–º
                sender = profile.get("SENDER", "bot")
                if sender == "userbot":
                    userbot_config = config.get("USERBOT", {})
                    if not userbot_config.get("ENABLED", False):
                        continue

                COUNT = profile["COUNT"]
                LIMIT = profile.get("LIMIT", 0)
                TARGET_USER_ID = profile["TARGET_USER_ID"]
                TARGET_CHAT_ID = profile["TARGET_CHAT_ID"]

                # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–¥–∞—Ä–∫–æ–≤ –ø–æ–¥ —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å
                filtered_gifts = filter_gifts_by_profile(all_gifts, profile)
                if MORE_LOGS:
                    logger.info(f"–î–æ—Å—Ç—É–ø–Ω–æ –ø–æ–¥–∞—Ä–∫–æ–≤ –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –≤ –ø—Ä–æ—Ñ–∏–ª–µ {profile_index}: {len(filtered_gifts)}")

                if not filtered_gifts:
                    continue

                purchases = []
                before_bought = profile["BOUGHT"]
                before_spent = profile["SPENT"]

                for gift in filtered_gifts:
                    gift_id = gift["id"]
                    gift_price = gift["price"]
                    gift_total_count = gift["supply"]
                    sticker_file_id = gift["sticker_file_id"]

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –ø–µ—Ä–µ–¥ –∫–∞–∂–¥–æ–π –ø–æ–∫—É–ø–∫–æ–π
                    while (profile["BOUGHT"] < COUNT and
                           profile["SPENT"] + gift_price <= LIMIT):

                        sender = profile.get("SENDER", "bot")
                        if sender == "bot":
                            success = await buy_gift(
                                bot=bot,
                                env_user_id=USER_ID,
                                gift_id=gift_id,
                                target_user_id=TARGET_USER_ID,
                                target_chat_id=TARGET_CHAT_ID,
                                gift_price=gift_price,
                                file_id=sticker_file_id
                            )
                        elif sender == "userbot":
                            userbot_config = config.get("USERBOT", {})
                            success = await buy_gift_userbot(
                                session_user_id=USER_ID,
                                gift_id=gift_id,
                                target_user_id=TARGET_USER_ID,
                                target_chat_id=TARGET_CHAT_ID,
                                gift_price=gift_price,
                                file_id=sticker_file_id
                            )
                        else:
                            logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å SENDER={sender} –≤ –ø—Ä–æ—Ñ–∏–ª–µ {profile_index}")
                            success = False

                        if not success:
                            any_success = False
                            break  # –ù–µ —É–¥–∞–ª–æ—Å—å –∫—É–ø–∏—Ç—å ‚Äî –ø—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π –ø–æ–¥–∞—Ä–æ–∫

                        config = await get_valid_config(USER_ID)
                        profile = config["PROFILES"][profile_index]
                        profile["BOUGHT"] += 1
                        profile["SPENT"] += gift_price
                        purchases.append({"id": gift_id, "price": gift_price})
                        await save_config(config)
                        await asyncio.sleep(PURCHASE_COOLDOWN)

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º: –Ω–µ –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏ –ª–∏–º–∏—Ç –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏
                        if profile["SPENT"] >= LIMIT:
                            break

                    if profile["BOUGHT"] >= COUNT or profile["SPENT"] >= LIMIT:
                        break  # –î–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç –ª–∏–±–æ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É, –ª–∏–±–æ –ø–æ —Å—É–º–º–µ

                after_bought = profile["BOUGHT"]
                after_spent = profile["SPENT"]
                made_local_progress = (after_bought > before_bought) or (after_spent > before_spent)

                # –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤—ã–ø–æ–ª–Ω–µ–Ω: –ª–∏–±–æ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É, –ª–∏–±–æ –ø–æ –ª–∏–º–∏—Ç—É
                if (profile["BOUGHT"] >= COUNT or profile["SPENT"] >= LIMIT) and not profile["DONE"]:
                    config = await get_valid_config(USER_ID)
                    profile = config["PROFILES"][profile_index]
                    profile["DONE"] = True
                    await save_config(config)

                    target_display = get_target_display(profile, USER_ID)
                    summary_lines = [
                        f"\n‚îå‚úÖ <b>–ü—Ä–æ—Ñ–∏–ª—å {profile_index+1}</b>\n"
                        f"‚îúüë§ <b>–ü–æ–ª—É—á–∞—Ç–µ–ª—å:</b> {target_display}\n"
                        f"‚îúüí∏ <b>–ü–æ—Ç—Ä–∞—á–µ–Ω–æ:</b> {profile['SPENT']:,} / {LIMIT:,} ‚òÖ\n"
                        f"‚îîüéÅ <b>–ö—É–ø–ª–µ–Ω–æ </b>{profile['BOUGHT']} –∏–∑ {COUNT}:"
                    ]
                    gift_summary = {}
                    for p in purchases:
                        key = p["id"]
                        if key not in gift_summary:
                            gift_summary[key] = {"price": p["price"], "count": 0}
                        gift_summary[key]["count"] += 1

                    gift_items = list(gift_summary.items())
                    for idx, (gid, data) in enumerate(gift_items):
                        prefix = "   ‚îî" if idx == len(gift_items) - 1 else "   ‚îú"
                        summary_lines.append(
                            f"{prefix} {data['price']:,} ‚òÖ √ó {data['count']}"
                        )
                    report_message_lines += summary_lines

                    logger.info(f"–ü—Ä–æ—Ñ–∏–ª—å #{profile_index+1} –∑–∞–≤–µ—Ä—à—ë–Ω")
                    progress_made = True
                    await refresh_balance(bot)
                    continue  # –ö —Å–ª–µ–¥—É—é—â–µ–º—É –ø—Ä–æ—Ñ–∏–ª—é

                # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –∫—É–ø–ª–µ–Ω–æ ‚Äî –±–∞–ª–∞–Ω—Å/–ª–∏–º–∏—Ç/–ø–æ–¥–∞—Ä–∫–∏ –∫–æ–Ω—á–∏–ª–∏—Å—å
                if (profile["BOUGHT"] < COUNT or profile["SPENT"] < LIMIT) and not profile["DONE"] and made_local_progress:
                    target_display = get_target_display(profile, USER_ID)
                    summary_lines = [
                        f"\n‚îå‚ö†Ô∏è <b>–ü—Ä–æ—Ñ–∏–ª—å {profile_index+1}</b> (—á–∞—Å—Ç–∏—á–Ω–æ)\n"
                        f"‚îúüë§ <b>–ü–æ–ª—É—á–∞—Ç–µ–ª—å:</b> {target_display}\n"
                        f"‚îúüí∏ <b>–ü–æ—Ç—Ä–∞—á–µ–Ω–æ:</b> {profile['SPENT']:,} / {LIMIT:,} ‚òÖ\n"
                        f"‚îîüéÅ <b>–ö—É–ø–ª–µ–Ω–æ </b>{profile['BOUGHT']} –∏–∑ {COUNT}:"
                    ]
                    gift_summary = {}
                    for p in purchases:
                        key = p["id"]
                        if key not in gift_summary:
                            gift_summary[key] = {"price": p["price"], "count": 0}
                        gift_summary[key]["count"] += 1

                    gift_items = list(gift_summary.items())
                    for idx, (gid, data) in enumerate(gift_items):
                        prefix = "   ‚îî" if idx == len(gift_items) - 1 else "   ‚îú"
                        summary_lines.append(
                            f"{prefix} {data['price']:,} ‚òÖ √ó {data['count']}"
                        )
                    report_message_lines += summary_lines

                    logger.warning(f"–ü—Ä–æ—Ñ–∏–ª—å #{profile_index+1} –Ω–µ –∑–∞–≤–µ—Ä—à—ë–Ω")
                    progress_made = True
                    await refresh_balance(bot)
                    continue  # –ö —Å–ª–µ–¥—É—é—â–µ–º—É –ø—Ä–æ—Ñ–∏–ª—é

            if not any_success and not progress_made:
                logger.warning(
                    f"–ù–µ —É–¥–∞–ª–æ—Å—å –∫—É–ø–∏—Ç—å –Ω–∏ –æ–¥–∏–Ω –ø–æ–¥–∞—Ä–æ–∫ –Ω–∏ –≤ –æ–¥–Ω–æ–º –ø—Ä–æ—Ñ–∏–ª–µ (–≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ buy_gift –±—ã–ª–∏ –Ω–µ—É–¥–∞—á–Ω—ã)"
                )
                config["ACTIVE"] = False
                await save_config(config)
                text = ("‚ö†Ô∏è –ù–∞–π–¥–µ–Ω—ã –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –ø–æ–¥–∞—Ä–∫–∏, –Ω–æ <b>–Ω–µ —É–¥–∞–ª–æ—Å—å</b> –∫—É–ø–∏—Ç—å.\n"
                        "üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∞–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è!\n"
                        "ü™ú –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–∏–ø—ã –ø—Ä–∏–Ω–∏–º–∞–µ–º—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤ —É –ø–æ–ª—É—á–∞—Ç–µ–ª—è!\n"
                        "üö¶ –°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ üî¥ (–Ω–µ–∞–∫—Ç–∏–≤–µ–Ω).")
                message = await bot.send_message(chat_id=USER_ID, text=text)
                await update_menu(
                    bot=bot, chat_id=USER_ID, user_id=USER_ID, message_id=message.message_id
                )            

            # –ü–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π:
            if progress_made:
                config["ACTIVE"] = not all(p.get("DONE") for p in config["PROFILES"])
                await save_config(config)
                logger.info("–û—Ç—á—ë—Ç: —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø—Ä–æ—Ñ–∏–ª—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–≤–æ–¥–∫—É.")
                text = "üçÄ <b>–û—Ç—á—ë—Ç –ø–æ –ø—Ä–æ—Ñ–∏–ª—è–º:</b>\n"
                text += "\n".join(report_message_lines) if report_message_lines else "‚ö†Ô∏è –ü–æ–∫—É–ø–æ–∫ –Ω–µ —Å–æ–≤–µ—Ä—à–µ–Ω–æ."
                message = await bot.send_message(chat_id=USER_ID, text=text)
                await update_menu(
                    bot=bot, chat_id=USER_ID, user_id=USER_ID, message_id=message.message_id
                )

            if all(p.get("DONE") for p in config["PROFILES"]) and config["ACTIVE"]:
                config["ACTIVE"] = False
                await save_config(config)
                text = "‚úÖ –í—Å–µ –ø—Ä–æ—Ñ–∏–ª–∏ <b>–∑–∞–≤–µ—Ä—à–µ–Ω—ã</b>!\n‚ö†Ô∏è –ù–∞–∂–º–∏—Ç–µ ‚ôªÔ∏è <b>–°–±—Ä–æ—Å–∏—Ç—å</b> –∏–ª–∏ ‚úèÔ∏è <b>–ò–∑–º–µ–Ω–∏—Ç—å</b>!"
                message = await bot.send_message(chat_id=USER_ID, text=text)
                await update_menu(
                    bot=bot, chat_id=USER_ID, user_id=USER_ID, message_id=message.message_id
                )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ gift_purchase_worker: {e}")

        await asyncio.sleep(DEFAULT_BOT_DELAY)


async def main() -> None:
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.

    - –ú–∏–≥—Ä–∏—Ä—É–µ—Ç –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª (config.json)
    - –°–æ–∑–¥–∞—ë—Ç HTTP-—Å–µ—Å—Å–∏—é –∏ –æ–±—ä–µ–∫—Ç –±–æ—Ç–∞
    - –ü–æ–¥–∫–ª—é—á–∞–µ—Ç middleware (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∏ –¥–æ—Å—Ç—É–ø)
    - –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ö–µ–Ω–¥–ª–µ—Ä—ã
    - –ó–∞–ø—É—Å–∫–∞–µ—Ç userbot (–µ—Å–ª–∏ –æ–Ω –Ω–∞—Å—Ç—Ä–æ–µ–Ω)
    - –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ (–ø–æ–∫—É–ø–∫–∏, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–µ—à–∞ –ø–æ–¥–∞—Ä–∫–æ–≤)
    - –ó–∞–ø—É—Å–∫–∞–µ—Ç polling —á–µ—Ä–µ–∑ aiogram Dispatcher

    :return: None
    """
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ù–∞—á–∏–Ω–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é...")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ CONFIG_DATA
    env_config_data = get_env_variable("CONFIG_DATA", None)
    if env_config_data is not None:
        await update_config_from_env(config_data=env_config_data)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –º–∏–≥—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    await migrate_config_if_needed(USER_ID)
    await ensure_config(USER_ID)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Redis, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    env_use_redis = get_env_variable("USE_REDIS", None)
    if env_use_redis is not None:
        use_redis = env_use_redis.lower() == "true"
        set_use_redis(use_redis)

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Redis, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    redis_host = get_env_variable("REDIS_HOST", "localhost")
    redis_port = int(get_env_variable("REDIS_PORT", 6379))
    set_redis_config(redis_host, redis_port)

    session = await get_aiohttp_session(USER_ID)
    bot = Bot(token=TOKEN, session=session, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
    dp = Dispatcher(storage=MemoryStorage())
    dp.message.middleware(RateLimitMiddleware(
        commands_limits={"/start": 10, "/withdraw_all": 10, "/refund": 10}, 
        allowed_user_ids=ALLOWED_USER_IDS
    ))
    dp.callback_query.middleware(RateLimitMiddleware(
        commands_limits={"guest_deposit_menu": 10},
        allowed_user_ids=ALLOWED_USER_IDS
    ))
    dp.message.middleware(AccessControlMiddleware(ALLOWED_USER_IDS))
    dp.callback_query.middleware(AccessControlMiddleware(ALLOWED_USER_IDS))

    # –ü—Ä–æ—Å—Ç–∞—è –∑–∞—â–∏—Ç–∞: –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –≥—Ä–æ–º–æ–∑–¥–∫–∏—Ö traceback'–æ–≤ SecurityCheckMismatch
    def _loop_exception_handler(loop, context):
        exc = context.get("exception")
        if isinstance(exc, SecurityCheckMismatch):
            logger.warning("Pyrogram SecurityCheckMismatch ‚Äî –ø–æ–¥—Ä–æ–±–Ω—ã–π traceback –æ—Ç–∫–ª—é—á—ë–Ω.")
            return
        loop.default_exception_handler(context)

    try:
        loop = asyncio.get_running_loop()
        loop.set_exception_handler(_loop_exception_handler)
    except RuntimeError:
        logger.info("–ù–µ—Ç –∑–∞–ø—É—â–µ–Ω–Ω–æ–≥–æ event loop –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–π.")

    logging.getLogger("pyrogram").setLevel(logging.INFO)

    register_wizard_handlers(dp)
    register_catalog_handlers(dp)
    register_main_handlers(
        dp=dp,
        bot=bot,
        version=VERSION
    )

    # –ó–∞–ø—É—Å–∫ userbot, –µ—Å–ª–∏ —Å–µ—Å—Å–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    bot_info = await bot.get_me()
    bot_id = bot_info.id
    await try_start_userbot_from_config(USER_ID, bot_id)

    asyncio.create_task(gift_purchase_worker(bot))
    asyncio.create_task(userbot_gifts_updater(USER_ID))

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–æ–∫
    # –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏ –∫ –≤—Ä–µ–º–µ–Ω–Ω—ã–º —Å–±–æ—è–º —Å–µ—Ç–∏ –∏–ª–∏ —Å–µ—Ä–≤–µ—Ä–∞
    backoff_config = BackoffConfig(
        min_delay=1.0,
        max_delay=10.0,
        factor=2.0,
        jitter=0.2
    )
    await dp.start_polling(bot, backoff_config=backoff_config)

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO, stream=sys.stdout)
    try:
        asyncio.run(main())
    except Exception as exc:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {exc}", exc_info=True)
        sys.exit(1)
